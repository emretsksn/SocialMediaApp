package com.emretaskesen.tpost.ui.adapter

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.view.LayoutInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.bumptech.glide.load.engine.DiskCacheStrategy
import com.emretaskesen.tpost.R
import com.emretaskesen.tpost.cache.GroupCache
import com.emretaskesen.tpost.cache.UserCache
import com.emretaskesen.tpost.model.MessageList
import com.emretaskesen.tpost.ui.activity.message.ChatPage
import com.emretaskesen.tpost.ui.activity.message.GroupChat
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.firestore
import de.hdodenhof.circleimageview.CircleImageView

class MessageListAdapter(
    val context: Context ,
    private var messageList: ArrayList<MessageList> ,
) :
    RecyclerView.Adapter<MessageListAdapter.MyMessageViewHolder>() {
    val db = Firebase.firestore

    // Ä°Ã§ sÄ±nÄ±f (inner class) MyMessageViewHolder'Ä± tanÄ±mlÄ±yoruz. Bu sÄ±nÄ±f, RecyclerView iÃ§indeki Ã¶ÄŸelerin gÃ¶rÃ¼nÃ¼mlerini tutacak.
    inner class MyMessageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        // Layout iÃ§indeki bileÅŸenleri tanÄ±mlÄ±yoruz ve bir deÄŸere atÄ±yoruz.
        val vmProfileImageV: CircleImageView = itemView.findViewById(R.id.vmProfileImage)
        val vmLastMessageV: TextView = itemView.findViewById(R.id.vmLastMessage)
        val vmUserNameV: TextView = itemView.findViewById(R.id.vmUserName)
        val vmMessageCount: TextView = itemView.findViewById(R.id.vmMessageCount)
    }

    // Yeni bir gÃ¶rÃ¼nÃ¼m oluÅŸturmak iÃ§in onCreateViewHolder fonksiyonunu tanÄ±mlÄ±yoruz.
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyMessageViewHolder {
        val inflater = LayoutInflater.from(parent.context)
        val view = inflater.inflate(R.layout.view_message_single, parent, false)
        return MyMessageViewHolder(view)
    }

    // Veri kÃ¼mesindeki Ã¶ÄŸe sayÄ±sÄ±nÄ± dÃ¶ndÃ¼ren fonksiyon.
    override fun getItemCount(): Int {
        return messageList.size
    }

    // GÃ¶rÃ¼nÃ¼mlerin baÄŸlandÄ±ÄŸÄ± ve iÃ§eriklerinin atanmasÄ±nÄ±n gerÃ§ekleÅŸtiÄŸi fonksiyon.
    @SuppressLint("SetTextI18n")
    override fun onBindViewHolder(holder: MyMessageViewHolder , position: Int) {
        // Mevcut MessageList Ã¶ÄŸesini alÄ±yoruz.
        val currentMessages = messageList[position]
        // Aktif kullanÄ±cÄ±nÄ±n ID'sini alÄ±yoruz.
        val myID = FirebaseAuth.getInstance().currentUser!!.uid

        // Firestore'dan gelen veride mesaj verisi bir gruba mÄ± yoksa bir kiÅŸiye ait kontrol edip, deÄŸere gÃ¶re iÅŸlem yapÄ±yoruz.
        if (currentMessages.isGroup == true){
            // onBindViewHolder iÃ§inde kullanÄ±cÄ± bilgilerini ayarlamak iÃ§in:
            GroupCache.getGroup(currentMessages.userID!!){group->
                group?.let {
                    // Grup bilgileri mevcut, doÄŸrudan Ã¶nbellekten yÃ¼kleyin.
                    holder.vmUserNameV.text =
                        context.getString(R.string.group_name_etc , group.groupName)
                    Glide.with(context)
                        .load(group.groupPhoto)
                        .diskCacheStrategy(DiskCacheStrategy.ALL)
                        .error(R.drawable.ic_rounded_user)
                        .into(holder.vmProfileImageV)
                } ?: run {
                    // Grup bilgisi Ã¶nbellekte bulunamadÄ±ysa Ã¶nbelleÄŸi temizler ve gruplarÄ± veritabanÄ±ndan tekrar Ã§eker.
                    GroupCache.clear()
                    return@getGroup
                }

            }
        }else{
            // onBindViewHolder iÃ§inde kullanÄ±cÄ± bilgilerini ayarlamak iÃ§in:
            UserCache.getUser(currentMessages.userID!!) { userModel ->
                userModel?.let { user ->
                    // KullanÄ±cÄ± bilgileri mevcut, doÄŸrudan Ã¶nbellekten yÃ¼kleyin.
                    holder.vmUserNameV.text = context.getString(R.string.user_name_tag, user.userName)
                    Glide.with(context)
                        .load(user.profileImage)
                        .diskCacheStrategy(DiskCacheStrategy.ALL)
                        .error(R.drawable.ic_rounded_user)
                        .into(holder.vmProfileImageV)
                } ?: run {
                    // KullanÄ±cÄ± bilgisi Ã¶nbellekte bulunamadÄ±ysa Ã¶nbelleÄŸi temizler ve kullanÄ±cÄ±larÄ± veritabanÄ±ndan tekrar Ã§eker.
                    UserCache.clear()
                    return@getUser
                }
            }
        }

        // Mesaj sayÄ±sÄ±na gÃ¶re gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼ ayarlÄ±yoruz.
        if (currentMessages.messageCount==true) {
            holder.vmMessageCount.visibility = View.VISIBLE
            holder.vmMessageCount.text = "+1"
        }else{
            holder.vmMessageCount.visibility = View.GONE
        }

        // Son mesajÄ± gÃ¶steriyoruz.

        if (currentMessages.lastMessage?.contains("Konum") == true){
            holder.vmLastMessageV.text = "${currentMessages.lastMessage} ðŸ—º"
        }else if (currentMessages.lastMessage?.contains("GÃ¶rsel") == true){
            holder.vmLastMessageV.text = "${currentMessages.lastMessage} ðŸ“·"
        }else{
            holder.vmLastMessageV.text = currentMessages.lastMessage
        }

        // Mesajlar sayfasÄ±nda mesaj Ã¶ÄŸesine tÄ±klandÄ±ÄŸÄ±nda ilgili aktivitenin aÃ§Ä±lmasÄ± iÃ§in fonksiyonumuz.
        holder.itemView.setOnClickListener {
            if (currentMessages.isGroup == true){
                // Grup ise GroupChat aktivitesini baÅŸlat.
                val intent = Intent(context, GroupChat::class.java)
                intent.putExtra("groupID", currentMessages.userID)
                intent.putExtra("readStatus", "readMessages")
                context.startActivity(intent)
            }else{
                // KullanÄ±cÄ± ise ChatPage aktivitesini baÅŸlat.
                val intent = Intent(context, ChatPage::class.java)
                intent.putExtra("userID", currentMessages.userID)
                intent.putExtra("readStatus", "readMessages")
                context.startActivity(intent)
            }
        }

        // Mesajlar sayfasÄ±nda mesaj Ã¶ÄŸesine uzun basÄ±ldÄ±ÄŸÄ±nda popup aÃ§masÄ±nÄ± saÄŸlayan fonksiyonumuz.
        holder.itemView.setOnLongClickListener { view->
            val popupMenu = androidx.appcompat.widget.PopupMenu(context , view)
            popupMenu.inflate(R.menu.menu_option_messagelist)
            popupMenu.setOnMenuItemClickListener(object : androidx.appcompat.widget.PopupMenu.OnMenuItemClickListener {
                @SuppressLint("NotifyDataSetChanged")
                override fun onMenuItemClick(item : MenuItem?) : Boolean {
                    when (item?.itemId) {
                        R.id.actionArchive -> {
                            // ArÅŸivleme seÃ§eneÄŸi seÃ§ildiÄŸinde bir Toast mesajÄ± gÃ¶ster.
                            Toast.makeText(context,"YakÄ±nda", Toast.LENGTH_LONG).show()
                            return true
                        }
                        R.id.actionDelete -> {
                            // Silme seÃ§eneÄŸi seÃ§ildiÄŸinde ilgili mesajÄ± veritabanÄ±ndan sil ve veri setini gÃ¼ncelle.
                            db.collection("Users").document(myID).collection("MyMessages").document(currentMessages.userID!!).delete().addOnSuccessListener {
                                notifyDataSetChanged()
                            }
                            return true
                        }
                    }
                    return false
                }
            })
            popupMenu.show()
            true
        }

    }
}
